name: Deploy IDC OCR System

on:
  push:
    branches: [ main ]
    paths:
      - 'infra/**'
      - 'src/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'infra/**'
      - 'src/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.6.6
  TERRAGRUNT_VERSION: 0.54.8

jobs:
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup Terragrunt
        run: |
          wget -O terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terragrunt Validate
        working-directory: infra
        run: |
          terragrunt init -backend=false
          terragrunt validate

      - name: Terraform Format Check
        working-directory: infra
        run: terragrunt fmt -check -recursive

      - name: Python Lint Check
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics

  plan:
    name: Plan Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup Terragrunt
        run: |
          wget -O terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set Environment Variables
        run: |
          ENV_NAME="${{ github.event.inputs.environment || 'dev' }}"
          echo "ENVIRONMENT=$ENV_NAME" >> $GITHUB_ENV
          echo "PROJECT_NAME=idc-ocr-$ENV_NAME" >> $GITHUB_ENV

      - name: Terragrunt Plan
        working-directory: infra
        run: |
          terragrunt init
          terragrunt plan -out=tfplan
        env:
          TG_VAR_environment: ${{ env.ENVIRONMENT }}
          TG_VAR_project_name: ${{ env.PROJECT_NAME }}

      - name: Upload Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ env.ENVIRONMENT }}
          path: infra/tfplan
          retention-days: 5

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup Terragrunt
        run: |
          wget -O terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set Environment Variables
        run: |
          ENV_NAME="${{ github.event.inputs.environment || 'dev' }}"
          echo "ENVIRONMENT=$ENV_NAME" >> $GITHUB_ENV
          echo "PROJECT_NAME=idc-ocr-$ENV_NAME" >> $GITHUB_ENV

      - name: Check Bedrock Model Access
        run: |
          echo "Checking Bedrock model access..."
          aws bedrock list-foundation-models --region ${{ env.AWS_REGION }} --query 'modelSummaries[?contains(modelId, `claude-3`)].[modelId,modelName]' --output table || echo "Warning: Bedrock models may not be available"

      - name: Terragrunt Apply
        working-directory: infra
        run: |
          terragrunt init
          terragrunt apply -auto-approve
        env:
          TG_VAR_environment: ${{ env.ENVIRONMENT }}
          TG_VAR_project_name: ${{ env.PROJECT_NAME }}

      - name: Get Outputs
        id: outputs
        working-directory: infra
        run: |
          echo "s3_bucket=$(terragrunt output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "dynamodb_table=$(terragrunt output -raw dynamodb_table_name)" >> $GITHUB_OUTPUT
          echo "lambda_function=$(terragrunt output -raw lambda_function_name)" >> $GITHUB_OUTPUT

      - name: Display Deployment Info
        run: |
          echo "## 🚀 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**S3 Bucket:** ${{ steps.outputs.outputs.s3_bucket }}" >> $GITHUB_STEP_SUMMARY
          echo "**DynamoDB Table:** ${{ steps.outputs.outputs.dynamodb_table }}" >> $GITHUB_STEP_SUMMARY
          echo "**Lambda Function:** ${{ steps.outputs.outputs.lambda_function }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Upload Test Document:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "aws s3 cp your-document.pdf s3://${{ steps.outputs.outputs.s3_bucket }}/" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  test:
    name: Test Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: ${{ github.event.inputs.environment || 'dev' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terragrunt
        run: |
          wget -O terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set Environment Variables
        run: |
          ENV_NAME="${{ github.event.inputs.environment || 'dev' }}"
          echo "ENVIRONMENT=$ENV_NAME" >> $GITHUB_ENV

      - name: Get Deployment Outputs
        id: outputs
        working-directory: infra
        run: |
          echo "s3_bucket=$(terragrunt output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "dynamodb_table=$(terragrunt output -raw dynamodb_table_name)" >> $GITHUB_OUTPUT
          echo "lambda_function=$(terragrunt output -raw lambda_function_name)" >> $GITHUB_OUTPUT

      - name: Test AWS Services Access
        run: |
          echo "Testing AWS services access..."
          
          # Test S3 access
          if aws s3 ls s3://${{ steps.outputs.outputs.s3_bucket }}/ --quiet; then
            echo "✅ S3 bucket access working"
          else
            echo "❌ S3 bucket access failed"
            exit 1
          fi
          
          # Test DynamoDB access
          if aws dynamodb describe-table --table-name ${{ steps.outputs.outputs.dynamodb_table }} --region ${{ env.AWS_REGION }} --query "Table.TableName" --output text > /dev/null; then
            echo "✅ DynamoDB table access working"
          else
            echo "❌ DynamoDB table access failed"
            exit 1
          fi
          
          # Test Lambda function
          if aws lambda get-function --function-name ${{ steps.outputs.outputs.lambda_function }} --region ${{ env.AWS_REGION }} --query "Configuration.State" --output text | grep -q "Active"; then
            echo "✅ Lambda function is active"
          else
            echo "❌ Lambda function is not active"
            exit 1
          fi

      - name: Upload Test Document
        run: |
          # Create a test document
          cat > test-document.txt << 'EOF'
          # GitHub Actions Test Document
          
          This is an automated test document uploaded by GitHub Actions.
          
          ## Test Information
          - Environment: ${{ env.ENVIRONMENT }}
          - Workflow Run: ${{ github.run_number }}
          - Commit: ${{ github.sha }}
          - Date: $(date)
          
          ## Features Being Tested
          1. Document upload to S3
          2. Lambda function triggering
          3. Bedrock Data Automation text extraction
          4. AI summarization with Claude 3
          5. Data storage in DynamoDB
          
          This test validates the complete document processing pipeline.
          EOF
          
          # Upload test document
          aws s3 cp test-document.txt s3://${{ steps.outputs.outputs.s3_bucket }}/github-actions-test-${{ github.run_number }}.txt
          echo "✅ Test document uploaded successfully"

      - name: Wait for Processing
        run: |
          echo "Waiting for document processing to complete..."
          sleep 60

      - name: Verify Processing Results
        run: |
          # Check if document was processed
          ITEM_COUNT=$(aws dynamodb scan --table-name ${{ steps.outputs.outputs.dynamodb_table }} --region ${{ env.AWS_REGION }} --select "COUNT" --query "Count" --output text)
          
          if [ "$ITEM_COUNT" -gt 0 ]; then
            echo "✅ Document processing successful! Found $ITEM_COUNT item(s) in DynamoDB"
            
            # Get processing results
            LATEST_ITEM=$(aws dynamodb scan --table-name ${{ steps.outputs.outputs.dynamodb_table }} --region ${{ env.AWS_REGION }} --limit 1 --query "Items[0]" --output json)
            
            echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
            echo "**Documents Processed:** $ITEM_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "**Test Status:** ✅ PASSED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Latest Processed Document:" >> $GITHUB_STEP_SUMMARY
            echo '```json' >> $GITHUB_STEP_SUMMARY
            echo "$LATEST_ITEM" | jq '.' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ No items found in DynamoDB. Processing may have failed."
            echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
            echo "**Test Status:** ❌ FAILED" >> $GITHUB_STEP_SUMMARY
            echo "**Issue:** No documents found in DynamoDB" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Check Lambda Logs
        if: failure()
        run: |
          echo "Checking Lambda logs for errors..."
          aws logs tail /aws/lambda/${{ steps.outputs.outputs.lambda_function }} --region ${{ env.AWS_REGION }} --since 10m --format short 