name: Destroy IDC OCR System

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        type: choice
        options:
        - dev
        - staging
        - prod
      confirmation:
        description: 'Type "DESTROY" to confirm (case sensitive)'
        required: true
        type: string

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.6.6
  TERRAGRUNT_VERSION: 0.54.8

jobs:
  validate-input:
    name: Validate Destroy Request
    runs-on: ubuntu-latest
    steps:
      - name: Validate Confirmation
        run: |
          if [ "${{ github.event.inputs.confirmation }}" != "DESTROY" ]; then
            echo "❌ Confirmation failed. You must type 'DESTROY' exactly to proceed."
            exit 1
          else
            echo "✅ Confirmation validated"
          fi

      - name: Environment Warning
        run: |
          echo "## ⚠️ DESTROY CONFIRMATION" >> $GITHUB_STEP_SUMMARY
          echo "**Environment to destroy:** ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Requested by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚨 **This action will permanently delete all resources!**" >> $GITHUB_STEP_SUMMARY

  plan-destroy:
    name: Plan Destroy
    runs-on: ubuntu-latest
    needs: validate-input
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup Terragrunt
        run: |
          wget -O terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set Environment Variables
        run: |
          echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          echo "PROJECT_NAME=idc-ocr-${{ github.event.inputs.environment }}" >> $GITHUB_ENV

      - name: Check Current Resources
        id: resources
        working-directory: infra
        run: |
          # Check if deployment exists
          if terragrunt output s3_bucket_name 2>/dev/null; then
            echo "deployment_exists=true" >> $GITHUB_OUTPUT
            echo "s3_bucket=$(terragrunt output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
            echo "dynamodb_table=$(terragrunt output -raw dynamodb_table_name)" >> $GITHUB_OUTPUT
            echo "lambda_function=$(terragrunt output -raw lambda_function_name)" >> $GITHUB_OUTPUT
            echo "✅ Current deployment found"
          else
            echo "deployment_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ No current deployment found in ${{ env.ENVIRONMENT }}"
          fi
        continue-on-error: true

      - name: Display Current Resources
        if: steps.resources.outputs.deployment_exists == 'true'
        run: |
          echo "## 📋 Current Resources to be Destroyed" >> $GITHUB_STEP_SUMMARY
          echo "**S3 Bucket:** ${{ steps.resources.outputs.s3_bucket }}" >> $GITHUB_STEP_SUMMARY
          echo "**DynamoDB Table:** ${{ steps.resources.outputs.dynamodb_table }}" >> $GITHUB_STEP_SUMMARY
          echo "**Lambda Function:** ${{ steps.resources.outputs.lambda_function }}" >> $GITHUB_STEP_SUMMARY

      - name: Plan Destroy
        if: steps.resources.outputs.deployment_exists == 'true'
        working-directory: infra
        run: |
          terragrunt init
          terragrunt plan -destroy -out=destroy-plan
        env:
          TG_VAR_environment: ${{ env.ENVIRONMENT }}
          TG_VAR_project_name: ${{ env.PROJECT_NAME }}

      - name: Upload Destroy Plan
        if: steps.resources.outputs.deployment_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: destroy-plan-${{ env.ENVIRONMENT }}
          path: infra/destroy-plan
          retention-days: 1

  destroy:
    name: Execute Destroy
    runs-on: ubuntu-latest
    needs: plan-destroy
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Setup Terragrunt
        run: |
          wget -O terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set Environment Variables
        run: |
          echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          echo "PROJECT_NAME=idc-ocr-${{ github.event.inputs.environment }}" >> $GITHUB_ENV

      - name: Get Current Resources
        id: resources
        working-directory: infra
        run: |
          # Get current resources before destruction
          if terragrunt output s3_bucket_name 2>/dev/null; then
            echo "s3_bucket=$(terragrunt output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
            echo "deployment_exists=true" >> $GITHUB_OUTPUT
          else
            echo "deployment_exists=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Empty S3 Bucket
        if: steps.resources.outputs.deployment_exists == 'true'
        run: |
          S3_BUCKET="${{ steps.resources.outputs.s3_bucket }}"
          echo "Emptying S3 bucket: $S3_BUCKET"
          
          if aws s3 ls "s3://$S3_BUCKET" 2>/dev/null; then
            # Delete all objects and versions
            aws s3api list-object-versions --bucket "$S3_BUCKET" --query 'Versions[].{Key:Key,VersionId:VersionId}' --output json | \
            jq '.[] | "s3://'$S3_BUCKET'/" + .Key + " --version-id " + .VersionId' -r | \
            xargs -I {} aws s3api delete-object --bucket "$S3_BUCKET" --key {} || true
            
            # Delete delete markers
            aws s3api list-object-versions --bucket "$S3_BUCKET" --query 'DeleteMarkers[].{Key:Key,VersionId:VersionId}' --output json | \
            jq '.[] | "s3://'$S3_BUCKET'/" + .Key + " --version-id " + .VersionId' -r | \
            xargs -I {} aws s3api delete-object --bucket "$S3_BUCKET" --key {} || true
            
            # Final cleanup
            aws s3 rm "s3://$S3_BUCKET" --recursive || true
            echo "✅ S3 bucket emptied successfully"
          else
            echo "⚠️ S3 bucket doesn't exist or is already empty"
          fi

      - name: Download Destroy Plan
        if: steps.resources.outputs.deployment_exists == 'true'
        uses: actions/download-artifact@v4
        with:
          name: destroy-plan-${{ env.ENVIRONMENT }}
          path: infra/

      - name: Execute Destroy
        if: steps.resources.outputs.deployment_exists == 'true'
        working-directory: infra
        run: |
          terragrunt init
          terragrunt apply -auto-approve destroy-plan
        env:
          TG_VAR_environment: ${{ env.ENVIRONMENT }}
          TG_VAR_project_name: ${{ env.PROJECT_NAME }}

      - name: Verify Destruction
        run: |
          echo "Verifying all resources have been destroyed..."
          
          # Check if any resources still exist
          if terragrunt output s3_bucket_name 2>/dev/null; then
            echo "❌ Some resources may still exist"
            exit 1
          else
            echo "✅ All resources successfully destroyed"
          fi
        working-directory: infra
        continue-on-error: true

      - name: Cleanup Terraform State
        if: steps.resources.outputs.deployment_exists == 'true'
        working-directory: infra
        run: |
          # Clean up any remaining state files
          rm -f terraform.tfstate*
          rm -f .terraform.lock.hcl
          rm -rf .terraform/
          rm -rf .terragrunt-cache/
          echo "✅ Terraform state cleaned up"

      - name: Final Summary
        run: |
          echo "## 💥 Destruction Complete!" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Destroyed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** All resources have been permanently deleted" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **This action cannot be undone!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To redeploy the system, run the deployment workflow." >> $GITHUB_STEP_SUMMARY 